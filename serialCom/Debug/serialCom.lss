
serialCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000022f  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a9  00000000  00000000  000004c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000012f  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001d9  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  74:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <usart_init>:

/*Function defination*/

void usart_init()
{
	UBRRH = 0;
  7c:	10 bc       	out	0x20, r1	; 32
	UBRRL =12;
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	89 b9       	out	0x09, r24	; 9
	UCSRA|=(1<<U2X);
  82:	59 9a       	sbi	0x0b, 1	; 11
	UCSRB|= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	88 69       	ori	r24, 0x98	; 152
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL)|(3<<UCSZ0);
  8a:	80 b5       	in	r24, 0x20	; 32
  8c:	86 68       	ori	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
  90:	08 95       	ret

00000092 <usart_data_receive>:
	UDR = data;
}

unsigned char usart_data_receive( void )
{
	while ( !(UCSRA & (1<<RXC)) );
  92:	5f 9b       	sbis	0x0b, 7	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <usart_data_receive>
	return UDR;
  96:	8c b1       	in	r24, 0x0c	; 12
}
  98:	08 95       	ret

0000009a <usart_string_receive>:
		usart_data_transmit(*string++);
	}
}

char *usart_string_receive(char *receive_string,unsigned char terminating_character)
{
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	8c 01       	movw	r16, r24
  a4:	d6 2f       	mov	r29, r22
	unsigned char temp=0x00;
  a6:	c0 e0       	ldi	r28, 0x00	; 0
	
	for(unsigned char i=0;;i++)
	{
		*(receive_string+i)=usart_data_receive();
  a8:	0e 94 49 00 	call	0x92	; 0x92 <usart_data_receive>
  ac:	f8 01       	movw	r30, r16
  ae:	ec 0f       	add	r30, r28
  b0:	f1 1d       	adc	r31, r1
  b2:	80 83       	st	Z, r24
		if(*(receive_string+i)==terminating_character)
  b4:	8d 17       	cp	r24, r29
  b6:	11 f0       	breq	.+4      	; 0xbc <usart_string_receive+0x22>
			break;
		else
			temp++;
  b8:	cf 5f       	subi	r28, 0xFF	; 255
	}
  ba:	f6 cf       	rjmp	.-20     	; 0xa8 <usart_string_receive+0xe>
	*(receive_string+temp)='\0';
  bc:	f8 01       	movw	r30, r16
  be:	ec 0f       	add	r30, r28
  c0:	f1 1d       	adc	r31, r1
  c2:	10 82       	st	Z, r1
	return receive_string;
}
  c4:	c8 01       	movw	r24, r16
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	08 95       	ret

000000d0 <main>:
char buffer[10];
int x=0;

int main(void)
{
	DDRD = 0b11111110;
  d0:	8e ef       	ldi	r24, 0xFE	; 254
  d2:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b0011100;
  d4:	8c e1       	ldi	r24, 0x1C	; 28
  d6:	82 bb       	out	0x12, r24	; 18
	DDRB=0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	87 bb       	out	0x17, r24	; 23
	
	usart_init();
  dc:	0e 94 3e 00 	call	0x7c	; 0x7c <usart_init>
	sei();
  e0:	78 94       	sei
			
			usart_string_receive(buffer,'`');
			x=atoi(buffer);
		}
		if(x==1){
		PORTB = 0b00000010;
  e2:	c2 e0       	ldi	r28, 0x02	; 2
  e4:	0d c0       	rjmp	.+26     	; 0x100 <main+0x30>
	usart_init();
	sei();
	while(1){
		while (x==0){
			
			usart_string_receive(buffer,'`');
  e6:	60 e6       	ldi	r22, 0x60	; 96
  e8:	82 e6       	ldi	r24, 0x62	; 98
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 4d 00 	call	0x9a	; 0x9a <usart_string_receive>
			x=atoi(buffer);
  f0:	82 e6       	ldi	r24, 0x62	; 98
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 8e 00 	call	0x11c	; 0x11c <atoi>
  f8:	90 93 61 00 	sts	0x0061, r25
  fc:	80 93 60 00 	sts	0x0060, r24
	DDRB=0xFF;
	
	usart_init();
	sei();
	while(1){
		while (x==0){
 100:	80 91 60 00 	lds	r24, 0x0060
 104:	90 91 61 00 	lds	r25, 0x0061
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	69 f3       	breq	.-38     	; 0xe6 <main+0x16>
			
			usart_string_receive(buffer,'`');
			x=atoi(buffer);
		}
		if(x==1){
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	c1 f7       	brne	.-16     	; 0x100 <main+0x30>
		PORTB = 0b00000010;
 110:	c8 bb       	out	0x18, r28	; 24
		x=0;
 112:	10 92 61 00 	sts	0x0061, r1
 116:	10 92 60 00 	sts	0x0060, r1
 11a:	f2 cf       	rjmp	.-28     	; 0x100 <main+0x30>

0000011c <atoi>:
 11c:	fc 01       	movw	r30, r24
 11e:	88 27       	eor	r24, r24
 120:	99 27       	eor	r25, r25
 122:	e8 94       	clt
 124:	21 91       	ld	r18, Z+
 126:	20 32       	cpi	r18, 0x20	; 32
 128:	e9 f3       	breq	.-6      	; 0x124 <atoi+0x8>
 12a:	29 30       	cpi	r18, 0x09	; 9
 12c:	10 f0       	brcs	.+4      	; 0x132 <atoi+0x16>
 12e:	2e 30       	cpi	r18, 0x0E	; 14
 130:	c8 f3       	brcs	.-14     	; 0x124 <atoi+0x8>
 132:	2b 32       	cpi	r18, 0x2B	; 43
 134:	41 f0       	breq	.+16     	; 0x146 <atoi+0x2a>
 136:	2d 32       	cpi	r18, 0x2D	; 45
 138:	39 f4       	brne	.+14     	; 0x148 <atoi+0x2c>
 13a:	68 94       	set
 13c:	04 c0       	rjmp	.+8      	; 0x146 <atoi+0x2a>
 13e:	0e 94 ac 00 	call	0x158	; 0x158 <__mulhi_const_10>
 142:	82 0f       	add	r24, r18
 144:	91 1d       	adc	r25, r1
 146:	21 91       	ld	r18, Z+
 148:	20 53       	subi	r18, 0x30	; 48
 14a:	2a 30       	cpi	r18, 0x0A	; 10
 14c:	c0 f3       	brcs	.-16     	; 0x13e <atoi+0x22>
 14e:	1e f4       	brtc	.+6      	; 0x156 <atoi+0x3a>
 150:	90 95       	com	r25
 152:	81 95       	neg	r24
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	08 95       	ret

00000158 <__mulhi_const_10>:
 158:	7a e0       	ldi	r23, 0x0A	; 10
 15a:	97 9f       	mul	r25, r23
 15c:	90 2d       	mov	r25, r0
 15e:	87 9f       	mul	r24, r23
 160:	80 2d       	mov	r24, r0
 162:	91 0d       	add	r25, r1
 164:	11 24       	eor	r1, r1
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
